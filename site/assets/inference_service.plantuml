@startuml InferenceService

package "Inference Service" {
  object InferenceService {
    + InferenceServiceSpec spec
    + InferenceServiceStatus status
  }

  object InferenceServiceSpec {
    + PredictorSpec predictor
    + EngineSpec engine
    + DecoderSpec decoder
    + ModelRef model
    + ServingRuntimeRef runtime
    + RouterSpec router
    + string compartmentID
    + KedaConfig kedaConfig
  }

  object EngineSpec {
    + PodSpec
    + ComponentExtensionSpec
    + RunnerSpec runner
    + LeaderSpec leader
    + WorkerSpec worker
  }

  object DecoderSpec {
    + PodSpec
    + ComponentExtensionSpec
    + RunnerSpec runner
    + LeaderSpec leader
    + WorkerSpec worker
  }

  object LeaderSpec {
    + PodSpec
    + RunnerSpec runner
  }

  object WorkerSpec {
    + PodSpec
    + int size
    + RunnerSpec runner
  }

  object RouterSpec {
    + PodSpec
    + ComponentExtensionSpec
    + RunnerSpec runner
    + map<string, string> config
  }

  object RunnerSpec {
    + Container
  }

  object PredictorSpec {
    + ModelSpec model
    + PodSpec podSpec
    + ComponentExtensionSpec componentExtension
    + WorkerSpec workerSpec
  }

  object ModelRef {
    + string name
    + string kind
    + string apiGroup
    + string namespace
    + string[] fineTunedWeights
    + map<string, string> parameters
  }

  object ServingRuntimeRef {
    + string name
    + string kind
    + string apiGroup
  }

  object LoggerSpec {
    + string url
    + LoggerType mode
  }

  enum LoggerType {
    + all
    + request
    + response
  }

  InferenceService --|> InferenceServiceSpec
  InferenceService --|> InferenceServiceStatus
  InferenceServiceSpec --> PredictorSpec
  InferenceServiceSpec --> EngineSpec
  InferenceServiceSpec --> DecoderSpec
  InferenceServiceSpec --> ModelRef
  InferenceServiceSpec --> ServingRuntimeRef
  InferenceServiceSpec --> RouterSpec
  EngineSpec --> LeaderSpec
  EngineSpec --> WorkerSpec
  EngineSpec --> RunnerSpec
  DecoderSpec --> LeaderSpec
  DecoderSpec --> WorkerSpec
  DecoderSpec --> RunnerSpec
}

package "Inference Service Status" {
  object InferenceServiceStatus {
    + string url
    + Condition[] conditions
    + map<string, ComponentStatusSpec> components
  }

  object ComponentStatusSpec {
    + string latestReadyRevision
    + string latestCreatedRevision
    + string previousRolledoutRevision
    + string latestRolledoutRevision
    + TrafficTarget[] traffic
    + string url
    + string restUrl
  }

  object Condition {
    + string type
    + ConditionStatus status
    + string reason
    + string message
    + Time lastTransitionTime
  }

  object TrafficTarget {
    + string revisionName
    + int percent
    + string tag
    + bool latestRevision
  }

  InferenceServiceStatus --> ComponentStatusSpec
  InferenceServiceStatus --> Condition
  ComponentStatusSpec --> TrafficTarget
}
@enduml
